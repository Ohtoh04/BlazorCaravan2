@page "/caravan"

@using System.Collections.Generic
@using BlazorCaravan2.Client.Services
@using CaravanDomain.Models;
@using CaravanDomain.Entities;
@using Microsoft.AspNetCore.SignalR.Client;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject GameHubService GameHub

@code {
    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    int maxHandCards = 8;
    int maxCaravanCards = 10;

    // Данные для карт
    List<string> player1Hand = new List<string> { "10♠", "2♥", "K♣", "3♦" }; // Карты на руке у игрока 1
    List<string> caravan1player = new List<string> { "5♦", "7♠", "8♣" };           // Первый караван

    protected HubConnection? HubConnection;
    protected string PlayerId = string.Empty;

    protected bool IsConnected = false;
    protected string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            PlayerId = user.FindFirst("sub")?.Value ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        HubConnection = new HubConnectionBuilder()
           .WithUrl("/caravanhub")
           .Build();

        HubConnection.On<string, string>("CardPlayed", (playerId, gameStateJson) =>
        {
            // Обновление данных после хода
            StateHasChanged();
        });
        HubConnection.On<string, string>("GameStarted", (playerId, gameStateJson) =>
        {
            // Обновление данных после хода
            StateHasChanged();
        });
        HubConnection.On<string, string>("CardDrawn", (playerId, gameStateJson) =>
        {
            // Обновление данных после хода
            StateHasChanged();
        });
        HubConnection.On<string, string>("TurnEnded", (playerId, gameStateJson) =>
        {
        // Обновление данных после хода
        StateHasChanged();
        });
        HubConnection.On<string, string>("PlayerJoined", (playerId, gameStateJson) =>
        {
            // Обновление данных после хода
            StateHasChanged();
        });


        await HubConnection.StartAsync();
        IsConnected = true;

        // Присоединение к игре
        await HubConnection.InvokeAsync("JoinGame", SessionId, PlayerId);
        Message = "Waiting for another player to join...";
        StateHasChanged();
    }

    public async Task PlayCard(string card, int caravanIndex)
    {
        if (HubConnection != null)
        {
            await HubConnection.InvokeAsync("PlayCard", SessionId, PlayerId, card, caravanIndex);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection != null)
        {
            await HubConnection.DisposeAsync();
        }
    }

    void OnDragStart(string card, DragEventArgs e)
    {
        e.DataTransfer.SetData("text/plain", card);
    }

    async Task OnDrop(int caravanIndex, DragEventArgs e)
    {
        var card = e.DataTransfer.GetData("text/plain");
        if (!string.IsNullOrEmpty(card))
        {
            await PlayCard(card, caravanIndex);
        }
    }
}

<div class="container mt-4">
    <div class="row">
        <!-- Карты на руке Игрока 1 -->
        <div class="col-md-2 hand-cards">
            <h4>Ваши карты</h4>
            @foreach (var card in player1Hand)
            {
                <div class="card" draggable="true" @ondragstart="e => OnDragStart(card, e)">
                    @card
                </div>
            }
        </div>

        <!-- Центральные караваны -->
        <div class="col-md-8">
            <div class="row">
                <!-- Первый караван (врага) -->
                <div class="col-md-4 card-stack enemy-stack">
                    <h5 class="text-center">Караван 1 (Враг)</h5>
                    @foreach (var card in caravan1enemy)
                    {
                        <div class="card">@card</div>
                    }
                </div>

                <!-- Второй караван (врага) -->
                <div class="col-md-4 card-stack enemy-stack">
                    <h5 class="text-center">Караван 2 (Враг)</h5>
                    @foreach (var card in caravan2enemy)
                    {
                        <div class="card">@card</div>
                    }
                </div>

                <!-- Третий караван (врага) -->
                <div class="col-md-4 card-stack enemy-stack">
                    <h5 class="text-center">Караван 3 (Враг)</h5>
                    @foreach (var card in caravan3enemy)
                    {
                        <div class="card">@card</div>
                    }
                </div>
            </div>

            <div class="row mt-4">
                <!-- Первый караван (игрока) -->
                <div class="col-md-4 card-stack" @ondragover="e => e.PreventDefault()" @ondrop="e => OnDrop(0, e)">
                    <h5 class="text-center">Караван 1 (Вы)</h5>
                    @foreach (var card in caravan1player)
                    {
                        <div class="card">@card</div>
                    }
                </div>

                <!-- Второй караван (игрока) -->
                <div class="col-md-4 card-stack" @ondragover="e => e.PreventDefault()" @ondrop="e => OnDrop(1, e)">
                    <h5 class="text-center">Караван 2 (Вы)</h5>
                    @foreach (var card in caravan2player)
                    {
                        <div class="card">@card</div>
                    }
                </div>

                <!-- Третий караван (игрока) -->
                <div class="col-md-4 card-stack" @ondragover="e => e.PreventDefault()" @ondrop="e => OnDrop(2, e)">
                    <h5 class="text-center">Караван 3 (Вы)</h5>
                    @foreach (var card in caravan3player)
                    {
                        <div class="card">@card</div>
                    }
                </div>
            </div>
        </div>

        <!-- Карты на руке Игрока 2 -->
        <div class="col-md-2 hand-cards">
            <h4>Карты противника</h4>
            @foreach (var card in player2Hand)
            {
                <div class="card">
                    @card
                </div>
            }
        </div>
    </div>
</div>