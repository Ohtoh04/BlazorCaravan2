@page "/caravan/{SessionId}"
@rendermode InteractiveAuto
@using System.Collections.Generic
@using BlazorCaravan2.Client.Services
@using CaravanDomain.Models;
@using CaravanDomain.Entities;
@using Microsoft.AspNetCore.SignalR.Client;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<GamePage> Logger


@code {
    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    int maxHandCards = 8;
    int maxCaravanCards = 10;

    private bool player1Ready = false;
    private bool player2Ready = false;

    // Данные для карт

    private GameState? _gameState { get; set; }
    protected HubConnection? HubConnection;
    protected string YourId { get; set; } = string.Empty;
    protected string OpponentsId { get; set; } = string.Empty;


    protected bool IsConnected = false;
    protected string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            YourId = user.FindFirst("sub")?.Value ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        HubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/caravanhub"))
           .Build();

        HubConnection.On<GameState>("CardPlayed", (receivedGameState) =>
        {
            _gameState = receivedGameState;
            StateHasChanged();
        });
        HubConnection.On<string, GameState>("GameStarted", (sessionId, receivedGameState) =>
        {
            SessionId = sessionId;
            _gameState = receivedGameState;
            Logger.LogInformation($"game started on player {YourId}");
            StateHasChanged();
        });
        HubConnection.On<GameState>("CardDrawn", (receivedGameState) =>
        {
            _gameState = receivedGameState;

            StateHasChanged();
        });
        HubConnection.On<GameState>("TurnEnded", (receivedGameState) =>
        {
            _gameState = receivedGameState;
            StateHasChanged();
        });
        HubConnection.On<List<string>>("PlayerJoined", (playerIds) =>
        {
            OpponentsId = playerIds[0] == YourId ? playerIds[1] : playerIds[0];
            Logger.LogInformation($"PlayerJoined player[0] {playerIds[0]} player[1] {playerIds[1]}");
            StateHasChanged();
        });
        HubConnection.On<string>("GameOver", (winner) =>
        {
            // winner is a player id
            StateHasChanged();
        });


        await HubConnection.StartAsync();
        IsConnected = true;

        // Ensure connection state is stable
        if (HubConnection.State == HubConnectionState.Connected)
        {
            await HubConnection.InvokeAsync("JoinGame", SessionId, YourId);
            Message = "Waiting for another player to join...";
        }
        else
        {
            Logger.LogError("Failed to connect to SignalR hub.");
        }
        StateHasChanged();
    }

    public async Task PlayCard(string card, int caravanIndex)
    {
        if (HubConnection != null)
        {
            await HubConnection.InvokeAsync("PlayCard", SessionId, YourId, card, caravanIndex);
        }
    }

    public async Task StartGame(string sessionId)
    {
        if (HubConnection != null)
        {
            await HubConnection.InvokeAsync("StartGame", sessionId);
        }
    }

    public string GetCardImagePath(Card card)
    {
        // Base path for the card images
        const string basePath = "Images/deckg/";

        // If the card is a Joker
        if (card.CardNumber == CardRank.Joker)
        {
            return $"{basePath}cardg_joker.png"; // Assuming the Joker has a specific filename
        }

        // Map suits to their corresponding letters
        string suitLetter = card.CardSuit switch
        {
            CardSuit.Clubs => "c",
            CardSuit.Diamonds => "d",
            CardSuit.Hearts => "h",
            CardSuit.Spades => "s",
            _ => throw new ArgumentOutOfRangeException()
        };

        // Get the rank number (Ace = 1, Two = 2, ..., King = 13)
        int rankNumber = card.CardNumber switch
        {
            CardRank.Ace => 1,
            CardRank.Two => 2,
            CardRank.Three => 3,
            CardRank.Four => 4,
            CardRank.Five => 5,
            CardRank.Six => 6,
            CardRank.Seven => 7,
            CardRank.Eight => 8,
            CardRank.Nine => 9,
            CardRank.Ten => 10,
            CardRank.Jack => 11,
            CardRank.Queen => 12,
            CardRank.King => 13,
            _ => throw new ArgumentOutOfRangeException()
        };

        // Construct the filename
        return $"{basePath}cardg_{suitLetter}{rankNumber:D2}.png";
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection != null)
        {
            await HubConnection.DisposeAsync();
        }
    }

    void OnDragStart(string card, DragEventArgs e)
    {
        //e.DataTransfer.SetData("text/plain", card);
    }

    async Task OnDrop(int caravanIndex, DragEventArgs e)
    {
        // var card = e.DataTransfer.GetData("text/plain");
        // if (!string.IsNullOrEmpty(card))
        // {
        //     await PlayCard(card, caravanIndex);
        // }
    }



    private async Task PlayerReady(ChangeEventArgs e)
    {
        if (YourId == null || OpponentsId == null)
        {
            return;
        }

        // Определяем, какой игрок готов
        if ((bool)e.Value)
        {
            if (HubConnection != null)
            {
                // Сигнализируем готовность через хаб
                await HubConnection.InvokeAsync("PlayerReady", SessionId, YourId);
            }
        }

        // Если оба игрока готовы, запускаем игру
        if (player1Ready && player2Ready)
        {
            if (HubConnection != null)
            {
                await HubConnection.InvokeAsync("StartGame", SessionId);
                Message = "Game is starting!";
                StateHasChanged();
            }
        }
    }
}

@if(_gameState is not null) {
    <div class="container mt-4">
        <div class="row">
            <!-- Your Hand -->
            <div class="col-md-2 hand-cards">
                <h4>Ваши карты</h4>
                @foreach (var card in _gameState.YourHand)
                {
                    <div class="card" draggable="true" @ondragstart="e => OnDragStart(card.ToString(), e)">
                        <img src="@GetCardImagePath(card)" alt="@card.CardNumber @card.CardSuit" />
                    </div>
                }
            </div>

            <!-- Central Caravans -->
            <div class="col-md-8">
                <div class="row">
                    <!-- Opponent Caravans -->
                    @for (int i = 0; i < 3; i++)
                    {
                        <div class="col-md-4 card-stack enemy-stack">
                            <h5 class="text-center">@($"Opponent Caravan {i + 1}")</h5>
                            @foreach (var card in _gameState.OpponentCaravans[i].Cards)
                            {
                                <div class="card">
                                    <img src="@GetCardImagePath(card)" alt="@card.CardNumber @card.CardSuit" />
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="row mt-4">
                    <!-- Your Caravans -->
                    @for (int i = 0; i < 3; i++)
                    {
                        <div class="col-md-4 card-stack" @ondrop="e => OnDrop(i, e)">
                            <h5 class="text-center">@($"Your Caravan {i + 1}")</h5>
                            @foreach (var card in _gameState.YourCaravans[i].Cards)
                            {
                                <div class="card">
                                    <img src="@GetCardImagePath(card)" alt="@card.CardNumber @card.CardSuit" />
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Opponent's Hand -->
            <div class="col-md-2 hand-cards">
                <h4>Карты противника</h4>
                @for (int i = 0; i < _gameState.OpponentsHandCount; i++)
                {
                    <div class="card blank-card">
                        <img src="/wwwroot/Images/deckg/cardg_back.png" alt="Back of card" />
                    </div>
                }
            </div>
        </div>

        <!-- Deck Card Counts -->
        <div class="row mt-4">
            <div class="col-md-6 text-center">
                <h5>Ваши карты в колоде: @_gameState.YourDeckCount</h5>
            </div>
            <div class="col-md-6 text-center">
                <h5>Карты противника в колоде: @_gameState.OpponentsDeckCount</h5>
            </div>
        </div>
    </div>
} 
else {
    <div class="container text-center mt-5">
        <h2>Waiting for players...</h2>
        <div class="row justify-content-center">
            <div class="col-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Player 1</h5>
                        <p class="card-text">
                            @if (!string.IsNullOrEmpty(YourId))
                            {
                                <span>@YourId</span>
                            }
                            else
                            {
                                <span class="text-muted">Waiting for Player 1...</span>
                            }
                        </p>
                        @if (!string.IsNullOrEmpty(YourId))
                        {

                        }
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Player 2</h5>
                        <p class="card-text">
                            @if (!string.IsNullOrEmpty(OpponentsId))
                            {
                                <span>@OpponentsId</span>
                            }
                            else
                            {
                                <span class="text-muted">Waiting for Player 2...</span>
                            }
                        </p>
                        @if (!string.IsNullOrEmpty(OpponentsId))
                        {
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-3">
            @if (OpponentsId != string.Empty) {
                <button @onclick="() => StartGame(SessionId)">Start</button>
            }
        </div>
    </div>
}
