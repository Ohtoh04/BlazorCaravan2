@page "/createtable"

@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation

<h3>Create a Card Game Table</h3>

<div>
    <label for="sessionId">Enter a Unique Session ID:</label>
    <input id="sessionId" @bind="SessionId" placeholder="Enter session ID" />
    <button @onclick="CreateGameTable" disabled="@IsProcessing">Create Table</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@code {
    private HubConnection? HubConnection;
    private string SessionId { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool IsProcessing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/caravanhub"))
            .WithAutomaticReconnect()
            .Build();

        try
        {
            await HubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Message = $"Could not connect to the server: {ex.Message}";
        }
    }

    private async Task CreateGameTable()
    {
        if (HubConnection == null || HubConnection.State != HubConnectionState.Connected)
        {
            Message = "SignalR connection is not active. Please refresh the page.";
            return;
        }

        if (string.IsNullOrWhiteSpace(SessionId))
        {
            Message = "Session ID cannot be empty.";
            return;
        }

        IsProcessing = true;

        try
        {
            await HubConnection.InvokeAsync("CreateGame", SessionId);
            Message = $"Game table with Session ID '{SessionId}' created successfully.";

            // Navigate to the Caravan page with the SessionId parameter
            Navigation.NavigateTo($"/caravan/{SessionId}");
        }
        catch (Exception ex)
        {
            Message = $"Error creating game table: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}
